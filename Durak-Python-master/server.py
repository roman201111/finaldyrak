import socket
import threading
import json
import time
from cards import Deck
from player import Player


class GameServer:
    def __init__(self, host='localhost', port=12345):
        self.host = host
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

        # –Ü–≥—Ä–æ–≤—ñ –¥–∞–Ω—ñ
        self.clients = {}  # {socket: player_data}
        self.games = {}  # {game_id: game_data}
        self.waiting_players = []

        self.running = True
        self.client_counter = 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_connections = 0
        self.active_games = 0

    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.socket.bind((self.host, self.port))
            self.socket.listen(5)
            print(f"üéÆ –°–µ—Ä–≤–µ—Ä –î—É—Ä–∞–∫ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ {self.host}:{self.port}")
            print("–û—á—ñ–∫—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤...")
            print("-" * 50)

            while self.running:
                try:
                    client_socket, addr = self.socket.accept()
                    self.total_connections += 1
                    print(f"üì± –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è: {addr} (–ó–∞–≥–∞–ª–æ–º: {self.total_connections})")

                    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
                    client_thread = threading.Thread(
                        target=self.handle_client,
                        args=(client_socket, addr)
                    )
                    client_thread.daemon = True
                    client_thread.start()

                except socket.error as e:
                    if self.running:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.cleanup()

    def handle_client(self, client_socket, addr):
        """–û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
        client_id = self.client_counter
        self.client_counter += 1

        print(f"üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {addr} (ID: {client_id})")

        try:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–∫–µ—Ç–∞
            client_socket.settimeout(300)  # 5 —Ö–≤–∏–ª–∏–Ω —Ç–∞–π–º–∞—É—Ç—É

            while self.running:
                try:
                    data = client_socket.recv(1024)
                    if not data:
                        print(f"üì§ –ö–ª—ñ—î–Ω—Ç {addr} –∑–∞–∫—Ä–∏–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è")
                        break

                    try:
                        decoded_data = data.decode('utf-8')
                        message = json.loads(decoded_data)
                        self.process_message(client_socket, message, addr)
                    except json.JSONDecodeError as e:
                        print(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ {addr}: {e}")
                        error_response = {
                            'type': 'error',
                            'message': '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
                        }
                        self.send_message(client_socket, error_response)
                    except UnicodeDecodeError as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥ {addr}: {e}")

                except socket.timeout:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–Ω–≥
                    if client_socket in self.clients:
                        ping_message = {'type': 'ping'}
                        if not self.send_message(client_socket, ping_message):
                            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ {addr}")
                            break
                except socket.error as e:
                    print(f"üîå –ü–æ–º–∏–ª–∫–∞ —Å–æ–∫–µ—Ç–∞ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º {addr}: {e}")
                    break

        except Exception as e:
            print(f"üí• –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º {addr}: {e}")
        finally:
            self.disconnect_client(client_socket, addr)

    def process_message(self, client_socket, message, addr):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
        msg_type = message.get('type')

        if msg_type == 'join':
            self.handle_join(client_socket, message, addr)
        elif msg_type == 'ready':
            self.handle_ready(client_socket, message)
        elif msg_type == 'game_action':
            self.handle_game_action(client_socket, message)
        elif msg_type == 'disconnect':
            print(f"üì§ –ö–ª—ñ—î–Ω—Ç {addr} –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ —Å–∏–≥–Ω–∞–ª –≤—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è")
        elif msg_type == 'ping':
            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –ø—ñ–Ω–≥
            pong_message = {'type': 'pong'}
            self.send_message(client_socket, pong_message)
        else:
            print(f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {addr}: {msg_type}")

    def handle_join(self, client_socket, message, addr):
        """–û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è"""
        player_name = message.get('name', f'Player_{len(self.clients)}')

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –≤–∂–µ —Ü–µ–π –∫–ª—ñ—î–Ω—Ç
        if client_socket in self.clients:
            print(f"‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç {addr} –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è
        player_data = {
            'socket': client_socket,
            'name': player_name,
            'id': len(self.clients),
            'address': addr,
            'game_id': None,
            'ready': False,
            'join_time': time.time()
        }

        self.clients[client_socket] = player_data
        self.waiting_players.append(client_socket)

        print(f"üë§ –ì—Ä–∞–≤–µ—Ü—å '{player_name}' –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è (–∞–¥—Ä–µ—Å–∞: {addr})")
        print(f"üìä –ì—Ä–∞–≤—Ü—ñ–≤ –≤ —á–µ—Ä–∑—ñ: {len(self.waiting_players)}, –ê–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä: {len(self.games)}")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        response = {
            'type': 'join_success',
            'player_id': player_data['id'],
            'name': player_name
        }
        self.send_message(client_socket, response)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É
        self.check_for_game_creation()

    def check_for_game_creation(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É"""
        if len(self.waiting_players) >= 2:
            # –ë–µ—Ä–µ–º–æ –¥–≤–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —á–µ—Ä–≥–∏
            player1_socket = self.waiting_players.pop(0)
            player2_socket = self.waiting_players.pop(0)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –æ–±–∏–¥–≤–∞ –≥—Ä–∞–≤—Ü—ñ —â–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ
            if player1_socket in self.clients and player2_socket in self.clients:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É
                game_id = f"game_{int(time.time())}"
                self.create_game(game_id, [player1_socket, player2_socket])
            else:
                # –Ø–∫—â–æ —Ö—Ç–æ—Å—å –≤—ñ–¥'—î–¥–Ω–∞–≤—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—à–∏—Ö –≤ —á–µ—Ä–≥—É
                if player1_socket in self.clients:
                    self.waiting_players.insert(0, player1_socket)
                if player2_socket in self.clients:
                    self.waiting_players.insert(0, player2_socket)

    def create_game(self, game_id, player_sockets):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—Ä–∏"""
        print(f"üé≤ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—Ä–∏: {game_id}")

        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª–æ–¥—É
            deck = Deck()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É
            game_data = {
                'id': game_id,
                'players': player_sockets,
                'deck': deck,
                'state': 'dealing',  # waiting, dealing, playing, finished
                'current_attacker': 0,
                'attack_cards': [],
                'defense_cards': [],
                'created_time': time.time()
            }

            self.games[game_id] = game_data
            self.active_games += 1

            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—ñ–≤
            player_names = []
            for i, socket in enumerate(player_sockets):
                if socket in self.clients:
                    self.clients[socket]['game_id'] = game_id
                    self.clients[socket]['position'] = i
                    player_names.append(self.clients[socket]['name'])

            print(f"üë• –ì—Ä–∞–≤—Ü—ñ –≤ –≥—Ä—ñ {game_id}: {' vs '.join(player_names)}")

            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤ –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏
            for i, socket in enumerate(player_sockets):
                if socket in self.clients:
                    opponent_socket = player_sockets[1 - i]
                    opponent_name = self.clients[opponent_socket][
                        'name'] if opponent_socket in self.clients else "–ù–µ–≤—ñ–¥–æ–º–∏–π"

                    response = {
                        'type': 'game_created',
                        'game_id': game_id,
                        'position': i,
                        'opponent_name': opponent_name
                    }
                    self.send_message(socket, response)

            # –ü–æ—á–∏–Ω–∞—î–º–æ —Ä–æ–∑–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç
            self.deal_initial_cards(game_id)

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏: {e}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤ –≤ —á–µ—Ä–≥—É
            for socket in player_sockets:
                if socket in self.clients:
                    self.waiting_players.append(socket)

    def deal_initial_cards(self, game_id):
        """–†–æ–∑–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∫–∞—Ä—Ç"""
        if game_id not in self.games:
            print(f"‚ùå –ì—Ä–∞ {game_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–æ–∑–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç")
            return

        game = self.games[game_id]
        deck = game['deck']

        print(f"üÉè –†–æ–∑–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç –¥–ª—è –≥—Ä–∏ {game_id}")

        try:
            # –†–æ–∑–¥–∞—î–º–æ –ø–æ 6 –∫–∞—Ä—Ç –∫–æ–∂–Ω–æ–º—É –≥—Ä–∞–≤—Ü–µ–≤—ñ
            for round_num in range(6):
                for player_socket in game['players']:
                    if player_socket in self.clients and len(deck) > 0:
                        card = deck.pop()

                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–∞—Ä—Ç—É –≥—Ä–∞–≤—Ü–µ–≤—ñ
                        response = {
                            'type': 'card_dealt',
                            'card': {
                                'rank': card.rank,
                                'suit': card.suit,
                                'is_trump': card.uber == card.suit
                            },
                            'round': round_num + 1
                        }
                        if not self.send_message(player_socket, response):
                            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–∞—Ä—Ç—É –≥—Ä–∞–≤—Ü–µ–≤—ñ")
                            return

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–∑–∏—Ä–Ω—É –∫–∞—Ä—Ç—É
            trump_card = deck.top_card
            trump_info = {
                'type': 'trump_card',
                'card': {
                    'rank': trump_card.rank,
                    'suit': trump_card.suit
                },
                'trump_suit': deck.uber,
                'deck_size': len(deck)
            }

            for player_socket in game['players']:
                if player_socket in self.clients:
                    self.send_message(player_socket, trump_info)

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—à–æ–≥–æ –Ω–∞–ø–∞–¥–Ω–∏–∫–∞
            self.determine_first_attacker(game_id)

            # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∏
            game['state'] = 'playing'

            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≥—Ä–∏
            for i, player_socket in enumerate(game['players']):
                if player_socket in self.clients:
                    attacker_name = self.clients[game['players'][game['current_attacker']]]['name']
                    response = {
                        'type': 'game_started',
                        'is_attacker': i == game['current_attacker'],
                        'attacker_name': attacker_name
                    }
                    self.send_message(player_socket, response)

            print(f"‚úÖ –ì—Ä–∞ {game_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞—Ä—Ç: {e}")
            self.end_game(game_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞—Ä—Ç")

    def determine_first_attacker(self, game_id):
        """–í–∏–∑–Ω–∞—á–∞—î –ø–µ—Ä—à–æ–≥–æ –Ω–∞–ø–∞–¥–Ω–∏–∫–∞"""
        import random
        game = self.games.get(game_id)
        if game:
            game['current_attacker'] = random.randint(0, 1)
            print(f"üéØ –ü–µ—Ä—à–∏–π –Ω–∞–ø–∞–¥–Ω–∏–∫ –≤ –≥—Ä—ñ {game_id}: –≥—Ä–∞–≤–µ—Ü—å {game['current_attacker']}")

    def handle_ready(self, client_socket, message):
        """–û–±—Ä–æ–±–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—è"""
        if client_socket in self.clients:
            self.clients[client_socket]['ready'] = True
            player_name = self.clients[client_socket]['name']
            print(f"‚úÖ –ì—Ä–∞–≤–µ—Ü—å {player_name} –≥–æ—Ç–æ–≤–∏–π")

    def handle_game_action(self, client_socket, message):
        """–û–±—Ä–æ–±–∫–∞ —ñ–≥—Ä–æ–≤–∏—Ö –¥—ñ–π"""
        if client_socket not in self.clients:
            return

        player_data = self.clients[client_socket]
        game_id = player_data.get('game_id')

        if not game_id or game_id not in self.games:
            error_response = {
                'type': 'error',
                'message': '–í–∏ –Ω–µ –≤ –≥—Ä—ñ'
            }
            self.send_message(client_socket, error_response)
            return

        action = message.get('action')
        print(f"üéÆ –Ü–≥—Ä–æ–≤–∞ –¥—ñ—è –≤—ñ–¥ {player_data['name']}: {action}")

        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ —ñ–≥—Ä–æ–≤–∏—Ö —Ö–æ–¥—ñ–≤
        # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ

    def send_message(self, client_socket, message):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É"""
        try:
            json_message = json.dumps(message, ensure_ascii=False) + '\n'
            client_socket.send(json_message.encode('utf-8'))
            return True
        except BrokenPipeError:
            print(f"üîå –ó'—î–¥–Ω–∞–Ω–Ω—è —Ä–æ–∑—ñ—Ä–≤–∞–Ω–æ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return False
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return False

    def disconnect_client(self, client_socket, addr):
        """–í—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
        if client_socket not in self.clients:
            return

        player_data = self.clients[client_socket]
        player_name = player_data['name']
        print(f"üì§ –ì—Ä–∞–≤–µ—Ü—å '{player_name}' –≤—ñ–¥'—î–¥–Ω–∞–≤—Å—è ({addr})")

        # –í–∏–¥–∞–ª—è—î–º–æ –∑ —á–µ—Ä–≥–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        if client_socket in self.waiting_players:
            self.waiting_players.remove(client_socket)
            print(f"üö´ –í–∏–¥–∞–ª–µ–Ω–æ –∑ —á–µ—Ä–≥–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {player_name}")

        # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è –≤ –≥—Ä—ñ
        game_id = player_data.get('game_id')
        if game_id and game_id in self.games:
            self.handle_player_disconnect_in_game(game_id, client_socket)

        # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞
        del self.clients[client_socket]

        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–æ–∫–µ—Ç
        try:
            client_socket.close()
        except:
            pass

        print(f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {len(self.clients)}, –ì—Ä–∞–≤—Ü—ñ–≤ –≤ —á–µ—Ä–∑—ñ: {len(self.waiting_players)}")

    def handle_player_disconnect_in_game(self, game_id, disconnected_socket):
        """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –ø—ñ–¥ —á–∞—Å –≥—Ä–∏"""
        game = self.games.get(game_id)
        if not game:
            return

        disconnected_player = self.clients.get(disconnected_socket, {}).get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
        print(f"üé≤ –ì—Ä–∞–≤–µ—Ü—å {disconnected_player} –≤—ñ–¥'—î–¥–Ω–∞–≤—Å—è –≤—ñ–¥ –≥—Ä–∏ {game_id}")

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
        for player_socket in game['players']:
            if player_socket != disconnected_socket and player_socket in self.clients:
                response = {
                    'type': 'opponent_disconnected',
                    'message': f'–ì—Ä–∞–≤–µ—Ü—å {disconnected_player} –≤—ñ–¥\'—î–¥–Ω–∞–≤—Å—è'
                }
                self.send_message(player_socket, response)

                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥—Ä–∞–≤—Ü—è –≤ —á–µ—Ä–≥—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                if player_socket not in self.waiting_players:
                    self.waiting_players.append(player_socket)
                    self.clients[player_socket]['game_id'] = None
                    self.clients[player_socket]['ready'] = False

        # –í–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É
        self.end_game(game_id, f"–ì—Ä–∞–≤–µ—Ü—å {disconnected_player} –≤—ñ–¥'—î–¥–Ω–∞–≤—Å—è")

    def end_game(self, game_id, reason=""):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏"""
        if game_id in self.games:
            del self.games[game_id]
            self.active_games = max(0, self.active_games - 1)
            print(f"üèÅ –ì—Ä—É {game_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            print(f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä: {self.active_games}")

    def cleanup(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("\nüßπ –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ —Å–µ—Ä–≤–µ—Ä–∞...")

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É —Å–µ—Ä–≤–µ—Ä–∞
        shutdown_message = {
            'type': 'server_shutdown',
            'message': '–°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è'
        }

        for client_socket in list(self.clients.keys()):
            self.send_message(client_socket, shutdown_message)
            try:
                client_socket.close()
            except:
                pass

        # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ
        self.clients.clear()
        self.waiting_players.clear()
        self.games.clear()

        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–æ–∫–µ—Ç
        try:
            self.socket.close()
        except:
            pass

        print("‚úÖ –†–µ—Å—É—Ä—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—á–∏—â–µ–Ω–æ")

    def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        self.running = False
        self.cleanup()

    def get_server_stats(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        return {
            'total_connections': self.total_connections,
            'active_clients': len(self.clients),
            'waiting_players': len(self.waiting_players),
            'active_games': len(self.games),
            'running': self.running
        }

    def print_status(self):
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤–µ—Ä–∞"""
        stats = self.get_server_stats()
        print("\n" + "=" * 50)
        print("üìä –°–¢–ê–¢–£–° –°–ï–†–í–ï–†–ê")
        print("=" * 50)
        print(f"üåê –ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {self.host}:{self.port}")
        print(f"üìà –ó–∞–≥–∞–ª—å–Ω–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω—å: {stats['total_connections']}")
        print(f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {stats['active_clients']}")
        print(f"‚è≥ –ì—Ä–∞–≤—Ü—ñ–≤ –≤ —á–µ—Ä–∑—ñ: {stats['waiting_players']}")
        print(f"üéÆ –ê–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä: {stats['active_games']}")
        print(f"üîÑ –°—Ç–∞—Ç—É—Å: {'–ü—Ä–∞—Ü—é—î' if stats['running'] else '–ó—É–ø–∏–Ω–µ–Ω–æ'}")
        print("=" * 50)

        # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
        if self.clients:
            print("\nüë• –ê–ö–¢–ò–í–ù–Ü –ì–†–ê–í–¶–Ü:")
            for i, (socket, player_data) in enumerate(self.clients.items(), 1):
                status = "–í –≥—Ä—ñ" if player_data.get('game_id') else "–í —á–µ—Ä–∑—ñ"
                print(f"  {i}. {player_data['name']} ({player_data['address']}) - {status}")

        # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä
        if self.games:
            print("\nüéÆ –ê–ö–¢–ò–í–ù–Ü –Ü–ì–†–ò:")
            for game_id, game_data in self.games.items():
                players = []
                for socket in game_data['players']:
                    if socket in self.clients:
                        players.append(self.clients[socket]['name'])
                print(f"  {game_id}: {' vs '.join(players)} ({game_data['state']})")

        print()


if __name__ == '__main__':
    server = GameServer()
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
        server_thread = threading.Thread(target=server.start)
        server_thread.daemon = True
        server_thread.start()

        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è –∫–æ–º–∞–Ω–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print("–ö–æ–º–∞–Ω–¥–∏: 'status' - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞, 'quit' - –≤–∏—Ö—ñ–¥")
        while server.running:
            try:
                command = input().strip().lower()
                if command == 'quit':
                    break
                elif command == 'status':
                    server.print_status()
                elif command == 'help':
                    print("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
                    print("  status - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
                    print("  help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É")
                    print("  quit - –∑—É–ø–∏–Ω–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä")
                elif command:
                    print("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å 'help' –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.")
            except (KeyboardInterrupt, EOFError):
                break

    except KeyboardInterrupt:
        print("\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è...")
    finally:
        server.stop()